/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package com.jjcampis.seminario_practica;
import alumnos.Alumno;
import alumnos.AlumnosDAO;
import cursos.Curso;
import cursos.CursoDAO;
import javax.swing.*;
import java.util.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JComboBox;
/**
 *
 * @author JJ
 */
public class cargar_alumnos_cursos extends javax.swing.JFrame {
    
    private CursoDAO cursoDAO;
    private Map<String, Curso> cursoMap;//necesito mapear el curso ya que el objeto curso no puedo ponerlo directamente en el jcombobox
    private AlumnosDAO alumnosDAO;
    private Map<String, Alumno> alumnosMap;
    private List<JToggleButton> toggleButtons;
    private boolean isTitleShown = true;//se usa para eliminar la opcion --Seleccione Curso

    public cargar_alumnos_cursos() {
        cursoDAO = new CursoDAO();
        cursoMap = new HashMap<>();
        alumnosMap = new HashMap<>();
        initComponents();
        loadCursos();
        botoncitos(1);
    }
    
    private void loadCursos() {
        List<Curso> cursos = cursoDAO.getAllCursos();
        for (Curso curso : cursos) {
            cursoComboBox.addItem(curso.toString());//me devuelve curso-division desde la clase Curso
            cursoMap.put(curso.toString(), curso);
        }
    }
    private void botoncitos(int id) {//botones que son los alumnos
        System.out.println("id: "+id);
        if (alumnosDAO == null) {//pregunto si existe para no crear objetos sin necesidad
            alumnosDAO = new AlumnosDAO();
        }
        List<Alumno> alumnos = alumnosDAO.getAlumnos_cursos(id);
        System.out.println(alumnos);
        panelsito.removeAll();
        toggleButtons = new ArrayList<>();
        for (Alumno alumno : alumnos) {
            JToggleButton toggleButton = new JToggleButton(alumno.toString());
            toggleButton.setMaximumSize(new java.awt.Dimension(Integer.MAX_VALUE, toggleButton.getMinimumSize().height));
            toggleButton.addActionListener(new ToggleButtonActionListener(alumno));
            toggleButtons.add(toggleButton);
            panelsito.add(toggleButton);
        }
        panelsito.revalidate();
        panelsito.repaint();
    }
    public class ToggleButtonActionListener implements ActionListener {

        private Alumno alumno;
        public ToggleButtonActionListener(Alumno alumno) {
            this.alumno = alumno;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            JToggleButton button = (JToggleButton) e.getSource();
            //para saber cuando se le clickeo al alumno si esta seleccionado o no
            //System.out.println(button.getText() + " is " + (button.isSelected() ? "selected" : "deselected"));
            if (button.isSelected()) {
                alumnosMap.put(alumno.toString(), alumno);
            } else {
                alumnosMap.remove(alumno.toString());
            }
            System.out.println("Seleccionados:");
            for (Alumno selectedAlumno : alumnosMap.values()) {
                System.out.println(selectedAlumno+"id "+selectedAlumno.getId());
                
            }
            
            
            
            /*System.out.println("seleccionados:");
            for (JToggleButton toggleButton : toggleButtons) {
                if (toggleButton.isSelected()) {
                    System.out.println(toggleButton.getText());
                }
            }*/
            //System.out.println(button.getText() + " is " + (button.isSelected() ? "selected" : "deselected"));
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        cursoComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        panelsito = new javax.swing.JPanel();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(640, 480));

        cursoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Seleccione Curso" }));
        cursoComboBox.setRenderer(cursoComboBox.getRenderer());
        cursoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cursoComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Oswald", 0, 14)); // NOI18N
        jLabel1.setText("Curso");

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setViewportView(panelsito);

        panelsito.setLayout(new javax.swing.BoxLayout(panelsito, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(panelsito);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(217, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cursoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(189, 189, 189))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cursoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/*no funka
    private class CustomComboBoxRenderer extends DefaultListCellRenderer {
        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            
            // Pintar el primer elemento de gris
            if (index == 0) {
                c.setForeground(Color.RED);
            } else {
                c.setForeground(Color.BLACK);
            }
            
            return c;
        }
    }*/
    
    
    
    private void cursoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cursoComboBoxActionPerformed
        // TODO add your handling code here:
        JComboBox<String> comboBox = (JComboBox<String>) evt.getSource();
        String selectedCourseString = (String) comboBox.getSelectedItem();
        
        Curso selectedCourse = cursoMap.get(selectedCourseString);//selected course ser√° el puntero del map que apunta al objeto curso
        //String selectedCourse = (String) comboBox.getSelectedItem();
        System.out.println("Curso seleccionado: " + selectedCourse);
        System.out.println("ID del curso seleccionado: " + selectedCourse.getId());
        alumnosMap.clear();//necesito vaciar el mapa de alumnos seleccionados 
        if (isTitleShown && !selectedCourseString.equals("--Seleccione Curso")) {
                comboBox.removeItemAt(0); // Remuevo el primero item para que no aparezca la opcion de seleccione curso
                isTitleShown = false;
                botoncitos(selectedCourse.getId());
                //comboBox.removeItemAt(0);
            } else {
                System.out.println("Seleccionado: " + selectedCourse);
                System.out.println("ID del curso seleccionado: " + selectedCourse.getId());
                botoncitos(selectedCourse.getId());
            }
    }//GEN-LAST:event_cursoComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cargar_alumnos_cursos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cargar_alumnos_cursos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cargar_alumnos_cursos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cargar_alumnos_cursos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cargar_alumnos_cursos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cursoComboBox;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelsito;
    // End of variables declaration//GEN-END:variables

}
